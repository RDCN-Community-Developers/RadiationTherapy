Imports RhythmBase.Objects
Imports RhythmBase.Util
Public Module Tools
	Public Class RDLevelHandler
		Private level As RDLevel
		Public Sub New(level As RDLevel)
			Me.level = level
		End Sub
		Public Sub SplitRDGSG()
			Dim Adds As New List(Of SayReadyGetSetGo)
			For Each item In level.EventsWhere(Of SayReadyGetSetGo)()
				If item.Splitable Then
					Adds.AddRange(item.Split)
					item.Active = False
				End If
			Next
			level.Events.AddRange(Adds)
		End Sub
		Public Sub SplitClassicBeat()
			Dim Adds As New List(Of BaseBeats)
			For Each item In level.EventsWhere(Of AddClassicBeat)()
				Adds.AddRange(item.Split)
				item.Active = False
			Next
			level.Events.AddRange(Adds)
		End Sub
		Public Sub SplitOneShotBeat()
			Dim Adds As New List(Of BaseBeats)
			For Each item In level.EventsWhere(Of AddOneshotBeat)()
				Adds.AddRange(item.Split)
				item.Active = False
			Next
			level.Events.AddRange(Adds)
		End Sub
		Public Sub RemoveUnactive()
			level.Events.RemoveAll(Function(i) i.Active = False)
		End Sub
		Public Sub DisposeTags()
			Dim Adds As New List(Of BaseEvent)
			For Each item In level.EventsWhere(Of TagAction)
				Dim eventGroups = level.GetTaggedEvents(item.ActionTag, Not item.Action = TagAction.Actions.Run)
				For Each group In eventGroups
					Dim startBeat = group.First().BeatOnly
					Dim copiedGroup = group.Select(Function(i) Clone(i))
					For Each copy In copiedGroup
						copy.BeatOnly += (item.BeatOnly - startBeat)
						copy.Tag = ""
						Adds.Add(copy)
					Next
					item.Active = False
				Next
			Next
			level.Events.AddRange(Adds)
		End Sub
		Public Sub CombineToTag(name As String, func As Func(Of BaseEvent, Boolean), replace As Boolean)
			If replace Then
				For Each item In level.EventsWhere(Function(i) func(i))
					item.Tag = name
				Next
			Else
				For Each item In level.EventsWhere(Function(i) func(i))
					item.Tag += name
				Next
			End If
		End Sub
		Public Sub Zoom(magnification As Single)

		End Sub
		Public Sub PressOnEveryBeat()
			Dim Add1 As New List(Of BaseBeats)
			Dim Add2 As New List(Of AddFreeTimeBeat)
			Dim Xs = level.EventsWhere(Of SetRowXs)
			For Each item In level.EventsWhere(Of AddClassicBeat)()
				Add1.AddRange(item.Split(Xs.Last(Function(i) i.BeatOnly < item.BeatOnly)))
				item.Active = False
			Next
			For Each item In Add1
				Dim n = item.Copy(Of AddFreeTimeBeat)
				n.Pulse = 6
				Add2.Add(n)
			Next
			level.Events.AddRange(Add2)
		End Sub
		Public Sub SplitRow()
			For Each row In level.Rows
				Dim commentColor = Drawing.Color.FromArgb(Random.Shared.Next)
				'Decos.Add((New Decoration(row.Rooms, "", Nothing,,), 181.5, 41))
				'Decos.Add((New Decoration(row.Rooms, "", Nothing,,), 254, 56))
				Dim Decos As New List(Of (deco As Decoration, left As Double, width As Double)) From {
					(New Decoration(row.Rooms, "", Nothing,,), 0, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 29, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 53, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 77, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 101, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 125, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 149, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 214, 24),
					(New Decoration(row.Rooms, "", Nothing,,), 282, 24)
				}
				For Each item In Decos
					item.deco.Rooms = row.Rooms
					item.deco.Visible = False
					level.Decorations.Add(item.deco)
					Dim visible As SetVisible = item.deco.CreateChildren(Of SetVisible)(1)
					visible.Visible = Not row.HideAtStart
					level.Events.Add(visible)
					Dim Comments = visible.Copy(Of Comment)
					Comments.Text = $"{item.deco.Filename}{vbCrLf}Generated by Observer."
					Comments.Color = commentColor
					Comments.CustomTab = Tabs.Sprites
					level.Events.Add(Comments)
				Next
				For Each item In row.Children
					For Each part In Decos
						Select Case item.Type
							Case EventType.HideRow
								Dim tempEvent = CType(item, HideRow)
								Dim CharEvent As SetVisible = part.deco.CreateChildren(Of SetVisible)(item)
								CharEvent.Visible = (tempEvent.Show = HideRow.Shows.Visible) Or (tempEvent.Show = HideRow.Shows.OnlyCharacter)
								level.Events.Add(CharEvent)
							Case EventType.MoveRow
								Dim tempEvent = CType(item, MoveRow)
								Dim CharEvent As Move = part.deco.CreateChildren(Of Move)(item)
								CharEvent.Position = tempEvent.RowPosition
								CharEvent.Scale = tempEvent.Scale
								CharEvent.Angle = tempEvent.Angle
								CharEvent.Pivot = (New Number(((tempEvent.Pivot) * 282 - (part.left - part.width / 2)) / part.width * 100), New Number(50))
								CharEvent.Ease = tempEvent.Ease
								CharEvent.Duration = tempEvent.Duration
								level.Events.Add(CharEvent)
							Case EventType.TintRows
								Dim tempEvent = CType(item, TintRows)
								Dim CharEvent As Tint = part.deco.CreateChildren(Of Tint)(item)
								CharEvent.Border = tempEvent.Border
								CharEvent.BorderColor = tempEvent.BorderColor
								CharEvent.Tint = tempEvent.Tint
								CharEvent.Opacity = tempEvent.Opacity
								CharEvent.Ease = tempEvent.Ease
								CharEvent.Duration = tempEvent.Duration
								level.Events.Add(CharEvent)
							Case EventType.PlayExpression
								Dim tempEvent = CType(item, PlayExpression)
								Dim charEvent As PlayAnimation = part.deco.CreateChildren(Of PlayAnimation)(item)
								charEvent.Expression = tempEvent.Expression
								level.Events.Add(charEvent)
						End Select
						If row.RowType = RowType.Classic Then
						End If
					Next
				Next
			Next
		End Sub
	End Class
End Module
