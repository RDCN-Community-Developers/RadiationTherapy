Imports System
Imports  .Objects
Module Program
	Sub Main(args As String())
		Console.WriteLine("输入 rdlevel 文件路径；处理后的文件会输出至同目录下 xxx_Processed.rdlevel 形式文件内。请确保此处无重要文件。")
		Dim Filename = Console.ReadLine
		Dim lvl = Level.LoadFile(Filename)
		For Each row In lvl.Rows
			Dim commentColor = Drawing.Color.FromArgb(Random.Shared.Next)
			'Decos.Add((New Decoration(row.Rooms, "", Nothing,,), 181.5, 41))
			'Decos.Add((New Decoration(row.Rooms, "", Nothing,,), 254, 56))
			Dim Decos As New List(Of (deco As Decoration, left As Double, width As Double)) From {
				(New Decoration(row.Rooms, "", Nothing,,), 0, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 29, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 53, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 77, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 101, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 125, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 149, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 214, 24),
				(New Decoration(row.Rooms, "", Nothing,,), 282, 24)
			}
			For Each item In Decos
				item.deco.Rooms = row.Rooms
				item.deco.Visible = False
				lvl.Decorations.Add(item.deco)
				Dim visible As SetVisible = item.deco.CreateChildren(Of SetVisible)(1)
				visible.Visible = Not row.HideAtStart
				lvl.Events.Add(visible)
				Dim Comments = visible.Copy(Of Comment)
				Comments.Text = $"{item.deco.Filename}{vbCrLf}Generated by Observer."
				Comments.Color = commentColor
				Comments.CustomTab = Tabs.Sprites
				lvl.Events.Add(Comments)
			Next
			For Each item In row.Children
				For Each part In Decos
					Select Case item.Type
						Case EventType.HideRow
							Dim tempEvent = CType(item, HideRow)
							Dim CharEvent As SetVisible = part.deco.CreateChildren(Of SetVisible)(item)
							CharEvent.Visible = (tempEvent.Show = HideRow.Shows.Visible) Or (tempEvent.Show = HideRow.Shows.OnlyCharacter)
							lvl.Events.Add(CharEvent)
						Case EventType.MoveRow
							Dim tempEvent = CType(item, MoveRow)
							Dim CharEvent As Move = part.deco.CreateChildren(Of Move)(item)
							CharEvent.Position = tempEvent.RowPosition
							CharEvent.Scale = tempEvent.Scale
							CharEvent.Angle = tempEvent.Angle
							CharEvent.Pivot = (New Number(((tempEvent.Pivot) * 282 - (part.left - part.width / 2)) / part.width * 100), New Number(50))
							CharEvent.Ease = tempEvent.Ease
							CharEvent.Duration = tempEvent.Duration
							lvl.Events.Add(CharEvent)
						Case EventType.TintRows
							Dim tempEvent = CType(item, TintRows)
							Dim CharEvent As Tint = part.deco.CreateChildren(Of Tint)(item)
							CharEvent.Border = tempEvent.Border
							CharEvent.BorderColor = tempEvent.BorderColor
							CharEvent.Tint = tempEvent.Tint
							CharEvent.Opacity = tempEvent.Opacity
							CharEvent.Ease = tempEvent.Ease
							CharEvent.Duration = tempEvent.Duration
							lvl.Events.Add(CharEvent)
						Case EventType.PlayExpression
							Dim tempEvent = CType(item, PlayExpression)
							Dim charEvent As PlayAnimation = part.deco.CreateChildren(Of PlayAnimation)(item)
							charEvent.Expression = tempEvent.Expression
							lvl.Events.Add(charEvent)
					End Select
					If row.RowType = RowType.Classic Then
					End If
				Next
			Next
		Next
		Dim SavePath = Text.RegularExpressions.Regex.Replace(Filename, "(.+)(\..+)", "$1_Processed$2")
		'lvl.Events.RemoveAll(Function(i) i.Type <> EventType.Tint) ' OrElse i.PrivateData.ContainsKey("ProgramCreated")) 'Not i.PrivateData.ContainsKey("ProgramCreated") OrElse i.PrivateData("ProgramCreated") <> True)
		lvl.SaveFile(SavePath)
		Console.WriteLine("已输出至" + SavePath)
	End Sub
End Module